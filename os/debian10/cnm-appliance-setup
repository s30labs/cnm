#!/usr/bin/perl -w
#-------------------------------------------------------------------------------------------
# Fichero: cnm-appliance-setup (Debian 10) 
# Los pasos a seguir para instalar CNM son:
# a. Ejcutar cnm-install -i -a root_pwd -b onm_pwd -n user [-m pro] [-r rev_number]
# b. Ejecutar /opt/crawler/bin/support/chk-host
#-------------------------------------------------------------------------------------------
use strict;
use Getopt::Std;
use Cwd;

BEGIN {
  $ENV{'MIBS'}='ALL';
  $ENV{'PATH'}='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';
}

use Data::Dumper;
#-------------------------------------------------------------------------------------------
my $REPO="software.s30labs.com";

#-------------------------------------------------------------------------------------------
my $APT_GET="/usr/bin/apt-get";
my $GIT="/usr/bin/git";

#-------------------------------------------------------------------------------------------
my @fpth = split ('/',$0,10);
my @fname = split ('\.',$fpth[$#fpth],10);
my $VERSION="1.0";
my $USAGE = <<USAGE;
CNM Installer $VERSION (c) s30labs

$fpth[$#fpth] 
$fpth[$#fpth] [-m master] [-r rev_number]
$fpth[$#fpth] -h

-i : Solo drbd
-s : Sin drbd
-z : Especifica dispositivo para drbd [default /dev/sda6]

-m : Modo (branch)
-r : Revision
-h : Ayuda
USAGE

#-------------------------------------------------------------------------------------------
my %opts=();
getopts("hm:r:",\%opts);
if ($opts{h}) { die $USAGE;}
my $BRANCH = 'master';
if ($opts{m}) { $BRANCH=$opts{m}; }
my $REV='';
if ($opts{r}) { $REV=$opts{r}; }

#-------------------------------------------------------------------------------------------
# Valida que es Debian10. En caso contrario termina.
#-------------------------------------------------------------------------------------------
my %os_info=();
my @out=`lsb_release -ir`;
foreach my $l (@out) {
	chomp $l;
	my ($k,$v)=split(/\:\s+/,$l);
	$os_info{$k}=$v;
}

if ( ($os_info{'Distributor ID'} !~ /debian/i) || ($os_info{'Release'} !~ /10/) ) {
	print Dumper(\%os_info);
	die "Not a Debian distro ...\n";
}

#-------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------
# 00. Paquetes minimos necesarios (openssh-server, ansible, git, vim)
#-------------------------------------------------------------------------------------------
# ansible 2.9
`echo "deb http://ppa.launchpad.net/ansible/ansible/ubuntu trusty main" > /etc/apt/sources.list.d/ansible.list`;
`apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 93C4A3FD7BB9C367`;
`apt-get update`;
`apt-get install -y --allow-remove-essential --allow-change-held-packages ansible`;

#-------------------------------------------------------------------------------------------
`apt-get install -y --allow-remove-essential --allow-change-held-packages openssh-server`;
`apt-get install -y --allow-remove-essential --allow-change-held-packages git vim sudo`;

#-------------------------------------------------------------------------------------------
# 01. Git config
#-------------------------------------------------------------------------------------------
print "-" x70 ."\n";
print "cnm-core ($$)\n";
print "-" x70 ."\n";

system ("$GIT config --global http.sslVerify false");
system ("$GIT config --global commit.template /opt/cnm/.gitmessage");
system ("$GIT config --global core.editor vim");
system ("$GIT config --global push.default simple"); #No sube los branches (si no hay que poner matching).

#-----------------------------------------------------
# 02. Clone/checkout repos: cnm, cnm-os, cnm-mibs, cnm-lang, cnm-sp
#-----------------------------------------------------
#-----------------------------------------------------
my @features = (
	{ 'name' => 'cnm', 'url' => 'https://github.com/s30labs/cnm.git' },
	{ 'name' => 'cnm-sp', 'url'  =>'https://github.com/s30labs/cnm-sp.git' },
	{ 'name' => 'cnm-mibs', 'url'  => 'https://github.com/s30labs/cnm-mibs.git' },
	{ 'name' => 'cnm-extras', 'url'  => 'https://github.com/s30labs/cnm-extras.git' }
);
foreach my $feat (@features) {
	print "-" x70, "\n";
	print "GET $feat->{'name'}...\n";
	print "-" x70, "\n";
	get_feature($feat->{'name'},$feat->{'url'});
}

#-------------------------------------------------------------------------------------------
# 03. Se crea /cfg/cnm_vars.yml si no existe
#-------------------------------------------------------------------------------------------
my $CNM_CFG_DIR='/cfg';
my $CNM_VARS_FILE='/cfg/cnm_vars.yml';
my $CNM_VARS = <<"CNMVARS";
---
# CNM Global Vars

key: gpl
ntpserver: pool.ntp.org
mtu: 1450

CNMVARS


if (! -d $CNM_CFG_DIR) { system ("/bin/mkdir -p $CNM_CFG_DIR"); }
if (! -f $CNM_VARS_FILE) {
  open (F,">$CNM_VARS_FILE");
  print F $CNM_VARS;
  close F;
}

#-------------------------------------------------------------------------------------------
# 04. Se crea /cfg/ansible.hosts si no existe
#-------------------------------------------------------------------------------------------
my $ANSIBLE_HOSTS_FILE='/cfg/ansible.hosts';

if (! -f $ANSIBLE_HOSTS_FILE) {
  open (F,">$ANSIBLE_HOSTS_FILE");
  print F 'localhost';
  close F;
}


#-------------------------------------------------------------------------------------------
# 07. Se instalan paquetes de Debian y modulos de PERL
#-------------------------------------------------------------------------------------------
my $cwd = cwd();
chdir('/opt/cnm/os/debian10');
my $cmd = "ansible-playbook -c local -i /cfg/ansible.hosts --tags base cnm.yml | tee /tmp/cnm-install-role-base.log";
print "Ejecutando $cmd ...\n";
`$cmd`;
chdir($cwd);

#-------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------
sub get_feature {
my ($feature,$url) = @_;

  	my $BRANCH = 'master';
  	my $GIT = "/usr/bin/git";
  	my $user = 'git';
  	my ($rc,$cmd) = (0,'');

  	my $dir_local = '/opt/'.$feature;

  	if ((-d $dir_local) && (-d "$dir_local/.git")) {
		
  		chdir($dir_local);
  		print "pull from $url ...\n";
  		$cmd = "$GIT pull";
  		$rc = system ($cmd);
  		if ($rc !=0) { print "**WARN** $cmd (rc=$rc)\n"; }
  		$cmd = "$GIT checkout";
  		$rc = system ($cmd);
  		if ($rc !=0) { print "**WARN** $cmd (rc=$rc)\n"; }

  	}
  	else {

  		print "clone from $url ...\n";
		if (-d $dir_local) { 
			$cmd = "/bin/rm -rf $dir_local"; 
  			$rc = system ($cmd);
  			if ($rc !=0) { print "$cmd (rc=$rc)\n"; }
		}
  		#$cmd = "$GIT clone -b $BRANCH https://$user:\@$REPO/$feature.git $dir_local";
  		$cmd = "$GIT clone -b $BRANCH $url $dir_local";
  		$rc = system ($cmd);
  		if ($rc !=0) { print "$cmd (rc=$rc)\n"; }

  		chdir $dir_local;
  		#$cmd = "$GIT remote set-url --push origin git\@$REPO:$dir_local.git";
  		#$rc = system ($cmd);
  		#if ($rc !=0) { print "$cmd (rc=$rc)\n"; }

  	}

}

