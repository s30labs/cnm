#!/usr/bin/perl -w
#-------------------------------------------------------------------------------------------
# $Id: log2rrd,v 1.2 2004/10/04 10:38:21 fml Exp $
#-------------------------------------------------------------------------------------------
use lib "/opt/crawler/bin";
use strict;
use Getopt::Long;
use Pod::Usage;
use XML::Simple;
use Data::Dumper;
use ONMConfig;
use Crawler::Store;
use Metrics::Base;

#-------------------------------------------------------------------------------------------
my $VERSION='1.0';
my $FILE_CONF='/opt/crawler/conf/onm.conf';
my $FILE_METRICS_OID='/opt/crawler/conf/oid2metric.xml';
my $FILE_METRICS_DEVICE='/opt/crawler/conf/device2metric.xml';
my $FILE_METRICS_FAMILY='/opt/crawler/conf/family2metric.xml';
my $CMD='/usr/bin/host';

#-------------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------
my $rule_ip=undef;
my $rule_name=undef;
my $comunity=undef;
my @out=();
my $file_app='default.app';

#-------------------------------------------------------------------------------------------
my $rCFG=conf_base($FILE_CONF);
my $conf_path=$rCFG->{'conf_path'}->[0];
my $txml_path=$rCFG->{'txml_path'}->[0];
my $app_path=$rCFG->{'app_path'}->[0];
my $dev_path=$rCFG->{'dev_path'}->[0];
my $store_path=$rCFG->{'store_path'}->[0];

my $db_server=$rCFG->{db_server}->[0];
my $db_name=$rCFG->{db_name}->[0];
my $db_user=$rCFG->{db_user}->[0];
my $db_pwd=$rCFG->{db_pwd}->[0];

my $store=Crawler::Store->new(db_server=>$db_server,db_name=>$db_name,db_user=>$db_user,db_pwd=>$db_pwd);
$store->store_path($store_path);


#-----------------------------------------------------------------
my %OPTS = ();
GetOptions (\%OPTS, 'in=s','help','man','get','set','v','noquery','name=s','ip=s','c=s','mode=s') or pod2usage(-exitval => 2, -input => \*DATA);;
if ($OPTS{'man'}) { pod2usage(-exitval => 2, -input => \*DATA); }
if ($OPTS{'help'}) { pod2usage(-exitval => 2, -input => \*DATA); }


#-------------------------------------------------------------------------------------------
while (<STDIN>) {


	#sliroda2/sliroda2-STD-num_oper.rrd:GAUGE:300:STD_BASE<<ts:v1:v2:..:vn
	#Jul 12 17:45:01 sliroda2 logger: sliroda2/sliroda2-STD-num_oper.rrd:GAUGE:300:STD_BASE<<1089647100:192:142
	#Sep 15 18:19:44 10.2.72.7 cms: 0000003034/custom002-STD.rrd:GAUGE:300:STD_AREA<<1095293771:16
	if (/\S+\s+\d+\s+\d+\:\d+\:\d+\s+(\S+)\s+\w+\:\s+(\S+\:\S+\:\S+\:\S+)\<\<(.*)/) {

		my $host=$1;
		my $data=$3;	
		my ($file,$mode,$lapse,$type)=split(/\:/,$2);
		my @vector=split(/\:/,$data);
		my $items=(scalar @vector) - 1;
		my $t=$vector[0];

      # Almacenamiento RRD --------------------------
     # my $store_path= $store->store_path();
     # if (! $store_path) {$store_path='/opt/';}

      my $rrd=$store_path.'elements/'.$file;

#/opt/data/rrd/elements/sliroda2/sliroda2-STD-num_oper.rrd,-1,GAUGE,300,,STD_BASE,
print "$rrd,$items,$mode,$lapse,$t,$type,$data\n";

      if ($store) {
         if (! -e $rrd) {  $store->create_rrd($rrd,$items,$mode,$lapse,$t,$type); }
         $store->update_rrd($rrd,$data);
      }
	}
}


__DATA__
#-----------------------------------------------------------------------
=head1 NAME

dmap - Mapea dispositivos en sistema gestor

=head1 SYNOPSIS

dmap [options] 

Options:
	
-set    Inserta/Actualiza dispositivos
		
-in     Fichero con los dispositivos
        Formato: Nombre,IP,txml,cat,[ubicacion,descripcion,oid]

-del    Elimina dispositivos definidos
-get    Obtiene dispositivos definidos

-help   Mensaje de ayuda
-man    Documentacion completa

=head1 OPTIONS

help   Mensaje de ayuda
set    Inserta/Actualiza dispositivos


=over 8


=back

=head1 DESCRIPTION

  B<This program> will read the given input file(s) and do someting
  useful with the contents thereof.

=cut


