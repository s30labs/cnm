#!/usr/bin/perl -w
#-------------------------------------------------------------------------------------------
# Fichero: actions
#-------------------------------------------------------------------------------------------
use lib "/opt/crawler/bin";
use strict;
use warnings;
use Getopt::Std;
use Crawler::Store;
use Crawler::Actions;
use ONMConfig;
use Data::Dumper;

#-------------------------------------------------------------------------------------------
my $USER='root';
my $GROUP='root';
my $STORE_PATH='/opt/data/rrd/';
my $FILE_CONF='/cfg/onm.conf';

#-------------------------------------------------------------------------------------------
my $rcfgbase=conf_base($FILE_CONF);
my $LAPSE=$rcfgbase->{notif_lapse}->[0];
my $MX=$rcfgbase->{notif_mx}->[0];
my $FROM=$rcfgbase->{notif_from}->[0];
my $FROM_NAME=$rcfgbase->{notif_from_name}->[0];
my $SUBJECT=$rcfgbase->{notif_subject}->[0];
my $SERIAL_PORT=$rcfgbase->{notif_serial_port}->[0];
my $PIN=$rcfgbase->{notif_pin}->[0];

my $db_server=$rcfgbase->{db_server}->[0];
my $db_name=$rcfgbase->{db_name}->[0];
my $db_user=$rcfgbase->{db_user}->[0];
my $db_pwd=$rcfgbase->{db_pwd}->[0];

#while (my ($k,$v)=each %$rcfgbase) {print "$k ";foreach (@$v) {print "$_ ";} print "\n";}
#exit;

#-------------------------------------------------------------------------------------------
my $ip=my_ip();

my %opts=();
getopts("hd:i:",\%opts);
my $log_level= (defined $opts{d}) ? $opts{d} : 'info';
my $id_task= (defined $opts{i}) ? $opts{i} : 0;

if ($opts{h}) { my $USAGE = usage(); die $USAGE;}

#-------------------------------------------------------------------------------------------
my $store=Crawler::Store->new(db_server=>$db_server,db_name=>$db_name,db_user=>$db_user,db_pwd=>$db_pwd, log_level=>$log_level);
$store->store_path($STORE_PATH);
my $dbh=$store->open_db();
my $params=$store->get_mcnm_credentials($dbh,{'host_ip'=>$ip});
$store->close_db($dbh);


#-------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------
# Cada cid tiene su proceso de notificationsd
foreach my $cid (keys %$params) {

   my $hidx=$params->{$cid}->{'hidx'};

   $rcfgbase->{db_server}->[0]=$params->{$cid}->{'db_server'};
   $rcfgbase->{db_name}->[0]=$params->{$cid}->{'db_name'};
   $rcfgbase->{db_user}->[0]=$params->{$cid}->{'db_user'};
   $rcfgbase->{db_pwd}->[0]=$params->{$cid}->{'db_pwd'};

   #-------------------------------------------------------------------------------------------

   $store->log('info',"Starting ip=$ip cid=$cid hidx=$hidx");

	# Crea el objeto Crawler::Actions y lo arranca ---------------------------------------
	my $actions=Crawler::Actions->new(
						user=>$USER, group=>$GROUP, name=>"actions", store_path=>$STORE_PATH, 
						lapse=>$LAPSE,	cfg=>$rcfgbase, range=>0, log_level=>$log_level, 
						mx=>$MX, from=>$FROM, from_name=>$FROM_NAME, subject=>$SUBJECT, 'role'=>'cmd',
						serial_port=>$SERIAL_PORT, pin=>$PIN, cid=>$cid );


   $store=$actions->create_store();
   $actions->store($store);
   my $dbh=$store->open_db();
   $actions->dbh($dbh);
   $store->dbh($dbh);
   my $provision=ProvisionLite->new(log_level=>$log_level);
   $provision->init();
   $actions->provision($provision);

   my $xagent=Crawler::Xagent->new('cfg'=>$rcfgbase);
   $actions->xagent($xagent);
   my $p = $store->get_proxy_list($dbh);
   $xagent->proxies($p);
	$xagent->timeout(900);

   $actions->register_devices($dbh);
   $actions->task2action($dbh,$id_task);
   my $res=$actions->actions_manager($dbh);
	print $res."\n";
}

#-------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------
sub usage {

   my $legend = check_version();

   my @fpth = split ('/',$0,10);
   my @fname = split ('\.',$fpth[$#fpth],10);
   my $USAGE = <<USAGE;
$legend
Ejecuta aplicaciones en primer plano

$fpth[$#fpth] -h  : Ayuda
$fpth[$#fpth] -i id_task -d [debug|info]

USAGE

   return $USAGE;

}

