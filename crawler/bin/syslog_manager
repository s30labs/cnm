#!/usr/bin/perl -w
#-------------------------------------------------------------------------------------------
# $Id: log2db,v 1.1 2004/10/04 11:04:10 fml Exp $
#-------------------------------------------------------------------------------------------
use lib "/opt/crawler/bin";
use strict;
use Getopt::Long;
use Pod::Usage;
use XML::Simple;
use Data::Dumper;
use ONMConfig;
use Crawler::Store;
use Metrics::Base;

#-------------------------------------------------------------------------------------------
my $VERSION='1.0';
my $FILE_CONF='/cfg/onm.conf';

#-------------------------------------------------------------------------------------------
my $ip=my_ip();

my $FILE_METRICS_OID='/opt/crawler/conf/oid2metric.xml';
my $FILE_METRICS_DEVICE='/opt/crawler/conf/device2metric.xml';
my $FILE_METRICS_FAMILY='/opt/crawler/conf/family2metric.xml';
my $CMD='/usr/bin/host';

#-------------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------
my $rule_ip=undef;
my $rule_name=undef;
my $comunity=undef;
my @out=();
my $file_app='default.app';
my %ALERTS=();
my $pre=1;

#-------------------------------------------------------------------------------------------
my $rCFG=conf_base($FILE_CONF);
my $conf_path=$rCFG->{'conf_path'}->[0];
my $txml_path=$rCFG->{'txml_path'}->[0];
my $app_path=$rCFG->{'app_path'}->[0];
my $dev_path=$rCFG->{'dev_path'}->[0];
my $store_path=$rCFG->{'store_path'}->[0];

my $db_server=$rCFG->{db_server}->[0];
my $db_name=$rCFG->{db_name}->[0];
my $db_user=$rCFG->{db_user}->[0];
my $db_pwd=$rCFG->{db_pwd}->[0];

my $store=Crawler::Store->new(db_server=>$db_server,db_name=>$db_name,db_user=>$db_user,db_pwd=>$db_pwd);
$store->store_path($store_path);


#-----------------------------------------------------------------
my %OPTS = ();
GetOptions (\%OPTS, 'in=s','help','man','get','set','v','noquery','name=s','ip=s','c=s','mode=s') or pod2usage(-exitval => 2, -input => \*DATA);;
if ($OPTS{'man'}) { pod2usage(-exitval => 2, -input => \*DATA); }
if ($OPTS{'help'}) { pod2usage(-exitval => 2, -input => \*DATA); }


#-------------------------------------------------------------------------------------------
my $dbh=$store->open_db();
while (<STDIN>) {
	
  	my ($proccess,$monitor,$msg,$ip,$addr,$full_name,$name,$domain)=('-','-','-','-','-','-','-','-');
  	my $t=time;
	if (! defined $dbh) { $dbh=$store->open_db(); }
  	
  	chomp;
	/(\w+\s+\d+)\s+(\d+\:\d+\:\d+)\s+(\S+)\s+(.*)$/;
  	my $log_data=$4;
$store->log('debug',"log2db::[DEBUG] LOGDATA= $log_data");
#Jul 31 17:46:09 sliromrtg1 snmptrapd[12657]: 1.1.1.1: Link Up Trap (0) Uptime: 2 days, 23:49:26.20, IF-MIB::ifIndex.93 = INTEGER: 93, IF-MIB::ifDescr.93 = STRING: Serial2:19, IF-MIB::ifType.93 = INTEGER: ppp(23), SNMPv2-SMI::enterprises.9.2.2.1.1.20.93 = STRING: "down"

#Aug 12 20:41:33 sliromrtg1 crawler.17524[17524]: clear_alert::[WARN] Insert -> alerts_store (ID=233) (/opt/crawler/bin/Crawler/Store.pm 572)
#Aug 12 20:44:32 1.1.1.1 330543: 2w1d: %CALLRECORD-3-MICA_TERSE_CALL_REC: DS0

	if (! defined $log_data) { next; }
	#syslog unix (pueden ser traps de snmptrapd)
  	if ($log_data=~/\b(.*?)\[\d+\]:\s*(.*)/) {
  	
		$proccess=$1;
		$msg=$2;
  		$monitor='rx_syslog';
		if ($proccess eq 'snmptrapd') { 
			$monitor='rx_trap';


         if ($msg=~/(\S+)\(via UDP\:\s+\[(\d+)\.(\d+)\.(\d+)\.(\d+)\]\:*\d*\)(.*)/) {

            $msg=$6;
            $ip="$2.$3.$4.$5";
            $full_name=$1;
            #if ($full_name eq '0.0.0.0') {
            #  $addr=pack "C4", $2, $3, $4, $5;
            #   $full_name=gethostbyaddr $addr, 2;
            #}
         }
         if ($msg=~/(\d+)\.(\d+)\.(\d+)\.(\d+): (.*)/) {

            $msg=$5;
            $ip="$1.$2.$3.$4";
            $addr=pack "C4", $1, $2, $3, $4;
            $full_name=gethostbyaddr $addr, 2;
         }
         if (defined($full_name)) {
            $full_name=~/^(\w+)\.(.*)$/;
            $name=$1;
            $domain=$2;
         }
      }

  	}

#------------------------------------------------------------------------
#	fml Aqui habria que contemplar otros formatos de syslog
#	elsif ($log_data=~/(\w+)\[\d+\]:\s*(.*)/) {
#	
#		$proccess=$1;
#		$msg=$2;
#  		$monitor='syslog';
#	  	
#  	}
#-------------------------------------------------------------------------
  	else { next; }

	#Quito las comillas para evitar problemas con la parte WEB 
	$msg =~ s/"//g;
 
	my $rv=$store->store_event($dbh, {date=>$t, code=>1, proccess=>$proccess, msg=>$msg, ip=>$ip, name=>$name, domain=>$domain});

	
  	$rv=$store->get_cfg_event2alert_from_device($dbh, {ip=>$ip, name=>$name, domain=>$domain});
	if (! defined $rv) {
		$store->log('notice',"log2db::[WARN] (IP=$ip NAME=$name DOMAIN=$domain) No definido id_dev");
		next;
	}

	my $alert_key='';
  	foreach my $l (@$rv) {
  
		my $id_cfg=$l->[0];	
  		my $action=$l->[1];
  		my $severity=$l->[2];
  		my $txt=$l->[3];
  		my $defined_monitor=$l->[4];
  		my $defined_process=$l->[5];

		if (($defined_monitor eq $monitor) && ($msg =~/$txt/)) {

			my $event_data="MONITOR=$monitor VALOR=$msg";
			if ($monitor eq 'rx_trap') { $monitor .= "_$defined_process";}
			
	  		# SET Alert --------------------------------------
			if ($action  =~ /set\:*(\d*)/) {  		

				my $id_set=$1;
				$store->log('notice',"log2db::[INFO] $monitor [SET-ALERT: IP=$ip/$full_name | $event_data]");
      		my ($alert_id,$alert_date,$alert_counter)=$store->store_alert($dbh,$monitor,{ ip=>$ip, event_data=>$event_data }, $pre);

				#Almaceno ID si la alerta se borra automaticamente
				if (defined $id_set) {
					$alert_key=join ('.',($ip,$action,$severity,$txt,$defined_monitor,$defined_process));
					$ALERTS{$alert_key}=$alert_id;
					$store->log('notice',"log2db::[INFO] $monitor [SET-ALERT: STORE KEY=$alert_key ID=$alert_id]");
				}
	   	}
   	
   	   # CLEAR Alert --------------------------------------
      	elsif ($action =~ /clear\:(\d+)/) {

				#Busco la clave de la alerta que causo el set
				my $id_set=$1;
				foreach my $s (@$rv) {
					if ($id_set == $s->[0]) { $alert_key=join ('.',($ip,$s->[1],$s->[2],$s->[3],$s->[4],$s->[5]));  last; }
				}
$store->log('notice',"log2db::[INFO] $monitor [******CLEAR-ALERT: IDSET=$id_set KEY=$alert_key]");
				if ( !defined $ALERTS{$alert_key} ) {next;}
				$store->log('notice',"log2db::[INFO] $monitor [CLEAR-ALERT: IP=$ip/$full_name | $event_data]");
				$store->log('notice',"log2db::[INFO] $monitor [******CLEAR-ALERT: KEY=$alert_key ID=$ALERTS{$alert_key}]");
				my %data=();
				$data{id_alert}=$ALERTS{$alert_key};
      		$store->clear_alert($dbh,\%data);
         }
      }		
	}

}

$store->close_db($dbh);

__DATA__
#-----------------------------------------------------------------------
=head1 NAME

dmap - Mapea dispositivos en sistema gestor

=head1 SYNOPSIS

dmap [options] 

Options:
	
-set    Inserta/Actualiza dispositivos
		
-in     Fichero con los dispositivos
        Formato: Nombre,IP,txml,cat,[ubicacion,descripcion,oid]

-del    Elimina dispositivos definidos
-get    Obtiene dispositivos definidos

-help   Mensaje de ayuda
-man    Documentacion completa

=head1 OPTIONS

help   Mensaje de ayuda
set    Inserta/Actualiza dispositivos


=over 8


=back

=head1 DESCRIPTION

  B<This program> will read the given input file(s) and do someting
  useful with the contents thereof.

=cut



