#!/usr/bin/perl -w
#-------------------------------------------------------------------
use strict;
use Getopt::Std;
use File::Basename;
use File::Copy;

my $RRDTOOL='/opt/rrdtool/bin/rrdtool';
my $FILE_RRD_IN = undef;
my $FILE_XML_IN = undef;
my $FILE_RRD_BACK = undef;
my $FILE_XML_OUT = undef;
my $CMD=undef;
my $FIX=undef;
my $VAL=undef;
my ($dirname,$basename);
# Informacion ------------------------------------------------------
my @fpth = split ('/',$0,10);
my @fname = split ('\.',$fpth[$#fpth],10);
my $VERSION="1.0";
my $USAGE = <<USAGE;
Programa para reparar archivos rrd
(c) fml

$fpth[$#fpth] -h
$fpth[$#fpth] -q
$fpth[$#fpth] -f /opt/data/rrd/file.rrd -r fix_value -v valor
$fpth[$#fpth] -f /opt/data/rrd/file.rrd -r fix_data

USAGE

#--------------------------------------------------------------------
my %opts=();
getopts("hf:r:v:",\%opts);
if ($opts{h}) { die $USAGE;}
if ($opts{f}) {$FILE_RRD_IN = $opts{f}; }
else {die $USAGE; }
if ($opts{r}) { 
	$FIX = $opts{r}; 
	if ($FIX eq 'fix_value') {
		if ($opts{v}) {$VAL = $opts{v}; }
		else {die $USAGE; }
	}
}
else {die $USAGE; }

#--------------------------------------------------------------------
$dirname=dirname($FILE_RRD_IN);
$basename=basename($FILE_RRD_IN,qr{\.rrd});
my $ftmp='/tmp/'.$basename;
$FILE_XML_IN=$dirname.'/'.$basename.'.xml';
$FILE_XML_OUT=$dirname.'/'.$basename.'.out.xml';

copy ($FILE_RRD_IN,$ftmp);
#/opt/data/rrd/elements/raro1014/raro1014-STD_TRAFFIC-WAN_FR_1.rrd > /tmp/raro1014
print "XML->$FILE_XML_IN\n";
$CMD="$RRDTOOL dump $FILE_RRD_IN > $FILE_XML_IN";
print "CMD->$CMD\n";
system ("$CMD");

#--------------------------------------------------------------------
open (XMLIN,"<$FILE_XML_IN");
open (XMLOUT,">$FILE_XML_OUT");

my @database=();
my $indb=0;
while (<XMLIN>) {
	chomp;
	if (/<database>/) { 
		$indb=1; 
		print XMLOUT "$_\n"; 
		next;
	}
	if (/<\/database>/) { 
		my $newdata;
		if ($FIX eq 'fix_gap') { $newdata=fix_gap(\@database); }
		elsif ($FIX eq 'fix_value') { $newdata=fix_value(\@database,$VAL); }
		else { $newdata=\@database; }
		foreach my $l (@$newdata) { print XMLOUT "$l\n"; }
		print XMLOUT "$_\n";
		$indb=0; 
		@database=();
		next;
	}

	if ($indb) {

		push @database,"$_";
		next;
	}

	else {
		print XMLOUT "$_\n";
	}
}
close (XMLIN);
close (XMLOUT);
#--------------------------------------------------------------------

#--------------------------------------------------------------------
$FILE_RRD_BACK=$dirname.'/'.$basename.'.pre';
move ($FILE_RRD_IN,$FILE_RRD_BACK);

$CMD="$RRDTOOL restore $FILE_XML_OUT $FILE_RRD_IN";
print "CMD->$CMD\n";
system ("$CMD");

#---------------------------------------------------------------------
sub fix_gap {
my $rdata=shift;
my @newdata=();
my $date='';
my $pre='';
my @data=();
my $NVAL=0;

	#<!-- 2004-03-10 07:20:00 GMT+1 / 1078906800 --> <row><v> NaN </v><v> NaN </v><v> NaN </v><v> NaN </v></row>
	foreach my $l (@$rdata) {	
		if ($l=~/(^.*?<!--\s+)(\S+\s+\S+\s+\S+\s+\/\s+\d+)\s+-->/) {$pre=$1;$date=$2;}
		my @values=();
		push @values,$pre;
		push @values,$date;
		$NVAL=0;
		while ($l=~/<v>\s*(\S+)\s*<\/v>/g) { push @values,$1; $NVAL++;}
		push @data, \@values;
	}

	# Arreglo el tema -------------------------------------------------------

	my @sequence=();
	my $previous='';
	my $cnt=0;
	my @changes=();
	foreach my $l (@data) {
		$cnt++;
		my $d='NaN';
		for my $i (2..$NVAL+1) { if ($l->[$i] ne 'NaN') { $d='N'; } }
		if ($previous eq $d) { next; }
		push @changes, $cnt-1;
		$previous=$d;
		push @sequence, $d.'_'.($cnt-1);
	}

	my $seq=join (',',@sequence);
	print 'SEQUENCE='. join ('|',@sequence)."\n";

	if ($seq=~/N_(\d+),NaN_(\d+),N_(\d+)/) { 
		my $startN=$1;
		my $start_NaN=$2;
		my $end_NaN=$3;

		my $empty=$end_NaN-$start_NaN;
		my $filled=$start_NaN-$startN;		
		if ($empty > $filled) {	print "**[WARN] SEQ=$seq\t EMPTY=$empty,FILLED=$filled => No relleno\n"; }
		else {
			print "**[OK] SEQ=$seq\t EMPTY=$empty,FILLED=$filled => Relleno $start_NaN->$end_NaN\n"; 
			my $s=$start_NaN-$empty;
			for my $j ($s..$start_NaN) {
				for my $i (2..$NVAL+1) {$data[$j+$empty]->[$i] = $data[$j]->[$i];}
			}
		}
	}

	foreach my $l (@data) {
		my $n=scalar @$l;
		my $lmod= "$l->[0]$l->[1] --> <row>";
		for my $i (2..$NVAL+1) { $lmod .= "<v> $l->[$i] </v>"; }
		$lmod .= '</row>';
		push @newdata,$lmod;	
	}

	return \@newdata;

}


#---------------------------------------------------------------------
sub fix_value {
my ($rdata,$value)=@_;
my @newdata=();
my $date='';
my $pre='';
my @data=();
my $NVAL=0;

   #<!-- 2004-03-10 07:20:00 GMT+1 / 1078906800 --> <row><v> NaN </v><v> NaN </v><v> NaN </v><v> NaN </v></row>
 	#<!-- 2016-06-06 18:30:00 CEST / 1465230600 --> <row><v>9.0841193600e+05</v><v>9.4954727467e+06</v></row>
   foreach my $l (@$rdata) {
      if ($l=~/(^.*?<!--\s+)(\S+\s+\S+\s+\S+\s+\/\s+\d+)\s+-->/) {$pre=$1;$date=$2;}
      my @values=();
      push @values,$pre;
      push @values,$date;
      $NVAL=0;
      #while ($l=~/<v>\s*(\d+\.\d+e\+\d+|NaN)\s*<\/v>/g) { push @values,$1;  print "**$1**\n"; $NVAL++;}
      while ($l=~/<v>\s*(\S+?)\s*<\/v>/g) { push @values,$1; $NVAL++;}
      push @data, \@values;

#print "$l\n";
#print @values,"\n";
   }

#exit;
   foreach my $l (@data) {
      my $n=scalar @$l;

      my $lmod= "$l->[0]$l->[1] --> <row>";
      for my $i (2..$NVAL+1) { 
			my $newv;
#print "V=$value\tR=$l->[$i]\n";
			if ($l->[$i] > $value) {
				$newv = 'NaN';
				print "**[MOD] $l->[$i] --> NaN\n"; 				
			}
			else {$newv = $l->[$i]; }
			$lmod .= "<v> $newv </v>"; 
		}
      $lmod .= '</row>';
      push @newdata,$lmod;
   }

   return \@newdata;

}

