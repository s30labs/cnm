#!/usr/bin/perl -w
#-------------------------------------------------------------------------------------------
# db_stub
# Genera el comando SQL y el field_map necesario para la estructura PHP 
#-------------------------------------------------------------------------------------------
use lib "/opt/crawler/bin";
use strict;
use Getopt::Long;
use Data::Dumper;
use ONMConfig;
use Crawler::Store;

#-------------------------------------------------------------------------------------------
my $VERSION='1.0';
#-------------------------------------------------------------------------------------------
my $FILE_CONF='/cfg/onm.conf'; 

#-------------------------------------------------------------------------------------------
my $rCFG=conf_base($FILE_CONF);
my $conf_path=$rCFG->{'conf_path'}->[0];
my $txml_path=$rCFG->{'txml_path'}->[0];
my $app_path=$rCFG->{'app_path'}->[0];
my $dev_path=$rCFG->{'dev_path'}->[0];
my $store_path=$rCFG->{'store_path'}->[0];

my $db_server=$rCFG->{db_server}->[0];
my $db_name=$rCFG->{db_name}->[0];
my $db_user=$rCFG->{db_user}->[0];
my $db_pwd=$rCFG->{db_pwd}->[0];

my $store=Crawler::Store->new(db_server=>$db_server,db_name=>$db_name,db_user=>$db_user,db_pwd=>$db_pwd);
$store->store_path($store_path);
my $dbh=$store->open_db();

#-------------------------------------------------------------------------------------------
my $STUB="   \'set\'=>array(

         \'__TABLE__\' => array(
            \'fields\' => array(__FIELDS__),
         ),
   ),
";

#-------------------------------------------------------------------------------------------

my $rtables = $store->show_tables($dbh,'%');
foreach my $t (@$rtables) {
	my $table=$t->[0];
	my $cols_data = $store->show_colummns($dbh,$table);
	my @cols=();
	foreach my $c (@$cols_data) { push @cols, "\'".$c->[0]."\'"; }
	my $fields=join (',', @cols);
	my $stub=$STUB;
	$stub =~ s/__TABLE__/$table/;
	$stub =~ s/__FIELDS__/$fields/;
	print "$stub\n";
}
#print Dumper($rtables);
exit;

my $table='devices';
my $cols_data = $store->show_colummns($dbh,$table);
print Dumper($rtables);
exit;

#-------------------------------------------------------------------------------------------
$store->close_db($dbh);

#-------------------------------------------------------------------------------------------
#$cols_by_colon : Columnas separadas por "," >>> id_dev,name,domain,ip ....
#$cols_tag_by_colon: TAGS separados por "," >>> :__ID_DEV__,:__NAME__,:__DOMAIN__,:__IP__ ...
#$pairs_by_colon1: Parejas TAG/columna separadas por "," >>> 'id_dev'=>':__ID_DEV__' ...
#$pairs_by colon2: Parejas columna/TAG separadas por "," >>> ':__ID_DEV__'=>'id_dev'

my %col_map=();
foreach my $c (@$cols_data) {  
	$col_map{$c->[0]}=':__'. uc $c->[0] . '__';
}
my @vc=();
my @vt=();
my @p1=();
my @p2=();
foreach my $c (keys %col_map) {
	push @vc, $c;
	push @vt, $col_map{$c};
	push @p1, $c.'='.$col_map{$c};
	push @p2, "\'".$col_map{$c}."\'=>\'".$c."\'";
}
#print Dumper(\%col_map);


my $cols_by_colon = join (',',@vc);
my $cols_tag_by_colon = join (',',@vt);
my $pairs_by_colon1 = join (',',@p1);
my $pairs_by_colon2 = join (',',@p2);



#print "$cols_by_colon\n";
#print "$cols_tag_by_colon\n";
#print "$pairs_by_colon1\n";
#print "$pairs_by_colon2\n";

my $CMD="\'$table\' => array(
   \'cmd\'=>\"INSERT INTO $table ($cols_by_colon)  VALUES ($cols_tag_by_colon) ON DUPLICATE KEY UPDATE $pairs_by_colon1\",

	\'field_map\' => array($pairs_by_colon2),

),

";

print $CMD."\n";
