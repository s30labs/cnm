#!/usr/bin/perl -w
#-------------------------------------------------------------------------------------------
# chk-credential
# Devuelve: 
# 0,1 (rc)
# texto (rcstr)
#-------------------------------------------------------------------------------------------
use lib "/opt/crawler/bin";
use lib "/opt/crawler/bin/support";
use strict;
use Getopt::Std;
#use System;
use Crawler::Store;;
use ONMConfig;
use Data::Dumper;
use CNMScripts::SSH;
use CNMScripts::WMI;
use CNMScripts::CIFS;
use CNMScripts::vSphereSDK;
use CNMScripts::IPMI;
use JSON;
#-------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------
my $FILE_CONF='/cfg/onm.conf';

#-------------------------------------------------------------------------------------------
my @fpth = split ('/',$0,10);
my @fname = split ('\.',$fpth[$#fpth],10);
my $USAGE = <<USAGE;
Valida la credencial especificada
(c) fml
$fpth[$#fpth] -c id_cred -i id_dev 	: Valida credencial
$fpth[$#fpth] -h  		: Ayuda

USAGE

#-------------------------------------------------------------------------------------------
my %opts=();
my $REV=0;
getopts("c:i:h",\%opts);
if ($opts{h}) { die $USAGE; }
if ( (!$opts{i}) || ($opts{i}!~/\d+/) ) { die $USAGE; }
if ( (!$opts{c}) || ($opts{c}!~/\d+/) ) { die $USAGE; }

my $id_credential=$opts{c};
my $id_dev=$opts{i};

#-------------------------------------------------------------------------------------------
my $rCFG=conf_base($FILE_CONF);
my $conf_path=$rCFG->{'conf_path'}->[0];
my $txml_path=$rCFG->{'txml_path'}->[0];
my $app_path=$rCFG->{'app_path'}->[0];
my $dev_path=$rCFG->{'dev_path'}->[0];
my $store_path=$rCFG->{'store_path'}->[0];

my $db_server=$rCFG->{db_server}->[0];
my $db_name=$rCFG->{db_name}->[0];
my $db_user=$rCFG->{db_user}->[0];
my $db_pwd=$rCFG->{db_pwd}->[0];

my $store=Crawler::Store->new(db_server=>$db_server,db_name=>$db_name,db_user=>$db_user,db_pwd=>$db_pwd);
$store->store_path($store_path);
my $dbh=$store->open_db();

#-------------------------------------------------------------------------------------------
my $cred = $store->get_credential_info($dbh,{'id_credential'=>$id_credential});
my $x = $store->get_device($dbh,{'id_dev'=>$id_dev},'ip');
my $ip=$x->[0][0];

#-------------------------------------------------------------------------------------------

#$VAR1 = {
#          '4' => {
#                   'pwd' => '1opor1o',
#                   'id_credential' => '4',
#                   'user' => 'root',
#                   'name' => '',
#                   'scheme' => undef,
#                   'type' => 'ssh',
#                   'port' => '22',
#                   'descr' => 'SSH cnm2'
#                 }
#        };
#
my $cred_type=$cred->{$id_credential}->{'type'};
my $user = $cred->{$id_credential}->{'user'};
my $pwd = $cred->{$id_credential}->{'pwd'};
my $port = $cred->{$id_credential}->{'port'};
my $descr = $cred->{$id_credential}->{'descr'};
my $scheme = $cred->{$id_credential}->{'scheme'};

#print "VALIDO $descr [$cred_type] >> USER=$user PWD=$pwd PORT=$port (ip=$ip)\n";

if ($cred_type eq 'ssh') {

   my $remote = CNMScripts::SSH->new( 'host'=>$ip, 'credentials'=>{'user'=>$user, 'password'=>$pwd} );
   $remote->connect();

#	my %RES=('rc'=>$remote->err_num(), 'msg'=>$remote->err_str());
#	print encode_json(\%RES)."\n";

	print $remote->err_num()."\n";
	print $remote->err_str()."\n";

}
elsif ($cred_type eq 'wmi') {
   my $wmi = CNMScripts::WMI->new('host'=>$ip, 'user'=>$user, 'pwd'=>$pwd);
   my $ok = $wmi->check_remote($ip);

   print $wmi->err_num()."\n";
   print $wmi->err_str()."\n";

}
elsif ($cred_type eq 'cifs') {
	my $credentials = "-user=$user -pwd=$pwd";
   my $remote = CNMScripts::CIFS->new( 'host'=>$ip, 'credentials'=>$credentials, 'share'=>$scheme );
	my $ok = $remote->check_remote($ip);
   #my $mount_point = $remote->connect();

   print $remote->err_num()."\n";
   print $remote->err_str()."\n";

#	$remote->disconnect($mount_point);
}
elsif ($cred_type eq 'vmware') {
	my $vmware = CNMScripts::vSphereSDK->new('server'=>$ip, 'user'=>$user, 'pwd'=>$pwd, 'port'=>$port);
   my $ok = $vmware->check_remote($ip);

   print $vmware->err_num()."\n";
   print $vmware->err_str()."\n";

}
elsif ($cred_type eq 'ipmi') {
   my $ipmi = CNMScripts::IPMI->new('host'=>$ip, 'user'=>$user, 'pwd'=>$pwd);
   my $ok = $ipmi->check_remote($ip);

   print $ipmi->err_num()."\n";
   print $ipmi->err_str()."\n";

}
else {

	print "1\n";
   print "Tipo de conexion no soportada\n";
}

#-------------------------------------------------------------------------------------------

