#!/usr/bin/perl -w
#-------------------------------------------------------------------
use strict;
use Getopt::Std;
use IO::File;
use File::Basename;
use File::Copy;
use RRDs;

my $FILE_RRD_IN = undef;
my ($dirname,$basename);
# Informacion ------------------------------------------------------
my @fpth = split ('/',$0,10);
my @fname = split ('\.',$fpth[$#fpth],10);
my $VERSION="1.0";
my $USAGE = <<USAGE;
Programa para reparar archivos rrd
(c) fml

$fpth[$#fpth] -h
$fpth[$#fpth] -a copy -f /file_con_rrds.txt -n host
$fpth[$#fpth] -a dump -f /file_con_rrds.txt -d output_dir 
$fpth[$#fpth] -a restore -f /file_con_rrds.txt -d input_dir 

USAGE

#--------------------------------------------------------------------
my %opts=();
getopts("ha:f:n:d:",\%opts);
if ($opts{'h'}) { die $USAGE;}
if ($opts{'f'}) {$FILE_RRD_IN = $opts{'f'}; }
else {die $USAGE; }

if ($opts{'a'} eq 'copy') { 	

	if (! $opts{'n'}) { die $USAGE; }
	my $host = $opts{'n'}; 
	copy_rrds($host);
}
elsif ($opts{'a'} eq 'dump') { 

   if (! $opts{'d'}) { die $USAGE; }
   my $dir = $opts{'d'};
	dump_rrds($dir); 
}
elsif ($opts{'a'} eq 'restore') { 

   if (! $opts{'d'}) { die $USAGE; }
   my $dir = $opts{'d'};
	restore_rrds($dir); 
}
else { die $USAGE;}


#---------------------------------------------------------------------
sub dump_rrds {
my ($dir)=@_;

	if (! -d $dir) { system ("/bin/mkdir -p $dir"); }

	my $data=read_file($FILE_RRD_IN);
	my $total = scalar (@$data);
	my $cnt=1;
	foreach my $file (@$data) {
      chomp $file;
      if ($file !~ /^\/(\S+)\/(.*?\.rrd)$/) { next; }

		my $new_dir=$dir.'/'.$1;
		my $xml_file=$new_dir.'/'.$2.'.xml';

		print "[ $cnt | $total ] PROCESANDO $file\n";
		$cnt++;

		if (! -d $new_dir) { system ("/bin/mkdir -p $new_dir"); }
		if (! -f $file) { 
			print "ERROR:: NO EXISTE $file\n";
			next;
		}
		my $cmd="/opt/rrdtool/bin/rrdtool dump $file > $xml_file";
		system ("$cmd");

		#print "CMD=$cmd\n";
   }

}


#---------------------------------------------------------------------
sub restore_rrds {
my ($dir)=@_;


#rrdtool restore [--range-check|-r] [--force-overwrite|-f] filename.xml filename.rrd


   if (! -d $dir) { system ("/bin/mkdir -p $dir"); }

   my $data=read_file($FILE_RRD_IN);
   my $total = scalar (@$data);
   my $cnt=1;
   foreach my $file (@$data) {
      chomp $file;
      if ($file !~ /^\/(\S+)\/(.*?\/)(.*?\.rrd)\.xml$/) { next; }

      my $new_dir=$dir.$2;
      my $rrd_file=$new_dir.$3;

      print "[ $cnt | $total ] PROCESANDO $file\n";
      $cnt++;

      if (! -d $new_dir) { system ("/bin/mkdir -p $new_dir"); }
      if (! -f $file) {
         print "ERROR:: NO EXISTE $file\n";
         next;
      }
      my $cmd="/opt/rrdtool/bin/rrdtool restore -f $file  $rrd_file";
      system ("$cmd");

      #print "CMD=$cmd\n";
   }

}

#---------------------------------------------------------------------
sub copy_rrds {
my ($host)=@_;

	my $fh = new IO::File $FILE_RRD_IN, "r";
	if (! defined $fh) {
		my $e=$fh->error();
		print "E=$e ($!)\n";
	}
	while (<$fh> ) {
		chomp;
		if (! /^(\S+)\/.*?\.rrd$/) { next; }
	
		my $dir=$1;
		if (! -d $dir) { system ("/bin/mkdir -p $dir"); }
		my $cmd="scp root\@$host:$_ $dir";
		print "$cmd\n"; 
		system("$cmd");

	}
	$fh->close();
}



#---------------------------------------------------------------------
sub read_file  {
my ($file)=@_;

	my @data=();
   my $fh = new IO::File $file, "r";
   if (! defined $fh) {
      my $e=$fh->error();
      print "E=$e ($!)\n";
   }
   while (<$fh> ) {
      chomp;
		push @data,$_;
   }
   $fh->close();

	return \@data;
}

